[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wan-prompt-enhancer"
version = "1.0.0"
description = "Transform basic prompts into cinematic WAN 2.2 video generation prompts using AI"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Jeremy Schroeder"}
]
maintainers = [
    {name = "Jeremy Schroeder"}
]
keywords = [
    "prompt-engineering",
    "video-generation",
    "ai",
    "gemini",
    "wan-2.2",
    "cinematography",
    "cli"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Artistic Software",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed"
]
requires-python = ">=3.9"
dependencies = [
    "google-generativeai>=0.8.0",
    "python-dotenv>=1.0.0"
]

[project.urls]
Homepage = "https://github.com/BitsofJeremy/WAN-2.2-Prompt-Enhancer"
Repository = "https://github.com/BitsofJeremy/WAN-2.2-Prompt-Enhancer"
Issues = "https://github.com/BitsofJeremy/WAN-2.2-Prompt-Enhancer/issues"
Documentation = "https://github.com/BitsofJeremy/WAN-2.2-Prompt-Enhancer#readme"

[project.scripts]
wan-enhancer = "wan_prompt_enhancer:main"

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0"
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["wan_prompt_enhancer"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]